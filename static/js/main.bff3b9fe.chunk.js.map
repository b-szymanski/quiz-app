{"version":3,"sources":["logo.svg","App.js","components/QuizData.js","components/Quiz.jsx","serviceWorker.js","index.js"],"names":["module","exports","App","QuizData","id","question","answers","correctAnswer","Quiz","state","userAnswer","yourQuestion","endQuiz","score","disabled","goodAnswer","finishButton","loadQuiz","setState","questions","nextQuestion","console","log","length","checkAnswer","answer","finishQuiz","this","prevProps","prevState","className","map","key","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bff3b9fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    \n    </div>\n  );\n}\n\nexport default App;\n","export const QuizData = [\r\n    {\r\n        id: 1,\r\n        question: 'Kto w serialu Netflixa wciela się w rolę Geralta z Rivii?',\r\n        answers: ['Tomasz Karolak', 'Michał Żebrowski', 'Henry Cavil', 'Madds Mikkelsen'],\r\n        correctAnswer: 'Henry Cavil'\r\n    },\r\n\r\n    {\r\n        id: 2,\r\n        question: 'Kto aktualnie znajduje się w składzie Virtus.pro?',\r\n        answers: ['byali', 'snax', 'neo', 'szpero'],\r\n        correctAnswer: 'snax'\r\n    },\r\n\r\n    {\r\n        id: 3,\r\n        question: 'Jaka drużyna obecnie jest najsłabsza z ligi hiszpańskiej?',\r\n        answers: ['leganes', 'huesca', 'barcelona', 'deportivo alves'],\r\n        correctAnswer: 'barcelona'\r\n    },\r\n    // {\r\n    //     id: 4,\r\n    //     question: 'dzieki za gre, zapisz podejscie',\r\n    //     answers: [''],\r\n    //     correctAnswer: ''\r\n    // },\r\n];","import React from 'react'\r\nimport { QuizData } from './QuizData'\r\nimport './quiz.css'\r\n\r\nclass Quiz extends React.Component {\r\n\r\n    state = {\r\n        userAnswer: null,\r\n        yourQuestion: 0,\r\n        answers: [],\r\n        endQuiz: false,\r\n        score: 0,\r\n        disabled: true,\r\n        goodAnswer: null,\r\n\r\n        finishButton: false\r\n        \r\n\r\n    }\r\n\r\n    loadQuiz = () => {\r\n        const {yourQuestion} = this.state;\r\n        this.setState(() => {\r\n            return {\r\n                questions: QuizData[yourQuestion].question,\r\n                answers: QuizData[yourQuestion].answers,\r\n                goodAnswer: QuizData[yourQuestion].correctAnswer\r\n\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\ncomponentDidMount() {\r\n    this.loadQuiz();\r\n}\r\n\r\nnextQuestion = () => {\r\n    const {userAnswer, goodAnswer, score, yourQuestion} = this.state\r\n    this.setState({\r\n        yourQuestion: this.state.yourQuestion + 1,\r\n    })\r\n    console.log(this.state.yourQuestion)\r\n\r\n    if(userAnswer === goodAnswer) {\r\n        this.setState({\r\n            score: score + 1\r\n        })\r\n\r\n    }\r\n\r\n    if(yourQuestion === QuizData.length) {\r\n        console.log(yourQuestion + \" as\")\r\n    }\r\n}\r\n\r\ncheckAnswer = answer => {\r\n    this.setState({\r\n        userAnswer: answer,\r\n        disabled: false\r\n    })\r\n}\r\n\r\nfinishQuiz = () => {\r\n    const {userAnswer, goodAnswer, score} = this.state\r\n    if(userAnswer === goodAnswer) {\r\n        this.setState({\r\n            score: score + 1\r\n        })\r\n\r\n    }\r\n\r\n\r\n    if(this.state.yourQuestion === QuizData.length -1)\r\n        this.setState({\r\n            endQuiz: true\r\n        })\r\n}\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const {yourQuestion} = this.state;\r\n        if(this.state.yourQuestion !== prevState.yourQuestion) {\r\n            this.setState(() => {\r\n\r\n                return {\r\n                    disabled: true,\r\n                    questions: QuizData[yourQuestion].question,\r\n                    answers: QuizData[yourQuestion].answers,\r\n                    goodAnswer: QuizData[yourQuestion].correctAnswer\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {questions, answers, yourQuestion, userAnswer, endQuiz, score} = this.state;\r\n        if(endQuiz) {\r\n            return (\r\n                <div className = \"Quiz\">\r\n                    <h2>Game over</h2>\r\n                   \r\n                    <p>Your score is {this.state.score} per {QuizData.length--}</p>\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        return(\r\n            <div className = \"Quiz\">\r\n                <h2>{questions}</h2>\r\n            <span> {`Questions ${yourQuestion+1} out of ${QuizData.length}`}</span>\r\n                {answers.map(answer => (\r\n                    <p key={answer.id} \r\n                        className= {`ui floating message options ${userAnswer === answer ? \"selected\" : null}`}\r\n                        onClick={() => this.checkAnswer(answer)} >\r\n                            {answer}\r\n                    </p>\r\n                ))}\r\n                {yourQuestion < QuizData.length - 1 &&\r\n                    <button disabled={this.setState.disabled} onClick={this.nextQuestion}>Next question</button>\r\n                 }\r\n                {yourQuestion === QuizData.length -1 && \r\n                    <button onClick={this.finishQuiz}>Finish</button>}\r\n\r\n            {/* <button disabled={this.setState.disabled} onClick={this.nextQuestion}>Next question</button>\r\n            <button disabled={this.setState.finishButton} onClick={this.finishQuiz}>Finish</button> */}\r\n                   \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Quiz;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport Quiz from './components/Quiz.jsx';\n// import Hello from './hello'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Quiz />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}